#define F_CPU 16000000UL
#include <stdio.h>
#include <stdlib.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <stdbool.h>
#include "usart.h"

#define DEF_FREQ 15000L
#define OCR1_RELOAD ((F_CPU/(2*DEF_FREQ))+1)

unsigned int usart_gets(char *str, unsigned int max);
volatile unsigned int reload;
unsigned int cnt = 0;

/*ISR(TIMER1_COMPA_vect)
{
	OCR1A = OCR1A + reload;
	PORTB ^= 0b00000001; // Toggle PB0 and PB1
}*/

unsigned int ReadChannel(unsigned char mux)
{
	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0); // frequency prescaler
	ADMUX = mux; // channel select
	ADMUX |= (1<<REFS1) | (1<<REFS0); 
	ADCSRA |= (1<<ADSC); // Start conversion
	while ( ADCSRA & (1<<ADSC) ) ;
	ADCSRA |= (1<<ADSC); // a transformation “single conversion”
	while ( ADCSRA & (1<<ADSC) );
	ADCSRA &= ~(1<<ADEN); // Disable ADC
	return ADCW;
}


void wait_1ms(void)
{
	unsigned int saved_TCNT1;
	
	saved_TCNT1=TCNT1;
	
	while((TCNT1-saved_TCNT1)<(F_CPU/1000L)); // Wait for 1 ms to pass
}

void waitms(int ms)
{
	while(ms--) wait_1ms();
}

#define PIN_PERIOD (PINB & 0b00000010)

// GetPeriod() seems to work fine for frequencies between 30Hz and 300kHz.
long int GetPeriod (int n)
{
	int i, overflow;
	unsigned int saved_TCNT1a, saved_TCNT1b;
	
	overflow=0;
	TIFR1=1; // TOV1 can be cleared by writing a logic one to its bit location.  Check ATmega328P datasheet page 113.
	while (PIN_PERIOD!=0) // Wait for square wave to be 0
	{
		if(TIFR1&1)	{ TIFR1=1; overflow++; if(overflow>5) return 0;}
	}
	overflow=0;
	TIFR1=1;
	while (PIN_PERIOD==0) // Wait for square wave to be 1
	{
		if(TIFR1&1)	{ TIFR1=1; overflow++; if(overflow>5) return 0;}
	}
	
	overflow=0;
	TIFR1=1;
	saved_TCNT1a=TCNT1;
	for(i=0; i<n; i++) // Measure the time of 'n' periods
	{
		while (PIN_PERIOD!=0) // Wait for square wave to be 0
		{
			if(TIFR1&1)	{ TIFR1=1; overflow++; if(overflow>1024) return 0;}
		}
		while (PIN_PERIOD==0) // Wait for square wave to be 1
		{
			if(TIFR1&1)	{ TIFR1=1; overflow++; if(overflow>1024) return 0;}
		}
	}
	saved_TCNT1b=TCNT1;
	if(saved_TCNT1b<saved_TCNT1a) overflow--; // Added an extra overflow.  Get rid of it.

	return overflow*0x10000L+(saved_TCNT1b-saved_TCNT1a);
}

unsigned int usart_gets(char *str, unsigned int max)
{
	char c;
	unsigned int cnt=0;
	while(1)
	{
	    c=usart_getchar();
	    usart_putchar(c); // echo back
	    if( (c=='\n') || (c=='\r') )
	    {
	    	*str=0;
	    	break;
	    }
		*str=c;
		str++;
		cnt++;
		if(cnt==(max-1))
		{
		    *str=0;
	    	break;
		}
	}
	return cnt;
}


int main(void)
{
	unsigned int adc;
	unsigned long int v;
	char buff[32];
	unsigned long newF;
	long int count;
	float T, f;
	
	reload=OCR1_RELOAD; // Reload value for default output frequency 
	
	usart_init(); // Configure the usart and baudrate
	
	DDRB  &= 0b11111101; // Configure PB1 as input
	PORTB |= 0b00000010; // Activate pull-up in PB1

	// Turn on timer with no prescaler on the clock.  We use it for delays and to measure period.
	TCCR1B |= _BV(CS10); // Check page 110 of ATmega328P datasheet

	waitms(500); // Wait for putty to start
	printf("Welcome to the metal detector.\n");
	
	while (1)
	{	
			
		count=GetPeriod(100);
		if(count>0)
		{
			T=count/(F_CPU*100.0);
			f=1/T;
			printf("f=%fHz (count=%lu)     \r", f, count); 
			
			if (f > 52400.0){
			 	printf("Coin Detected!! 		\n\r");
			 	
			 	DDRB |= 0b00000001;
				PORTB |= 0b00000001;
				
				adc=ReadChannel(0);
				v=(adc*5000L)/1023L;
				printf("Potentiometer digital output 'v' is %ld\n\r",v);
				//printf("ADC[0]=0x%03x, %ld.%03ldV\r", adc, v/1000, v%1000);
				PORTB ^= 0x01;
				
				DDRB |= 0b00000001;
				PORTB |= 0b00000001;
				
				if (v > 3000){
					PORTB &= (~0x01);
					_delay_ms(1);
					PORTB |= 0x01;
					_delay_ms(1);
				}
				else if (v < 3000){
					PORTB &= (~0x01);
					_delay_ms(100);
					PORTB |= 0x01;
					_delay_ms(100);
				}
				
				DDRB |= 0b00000101;
				PORTB |= 0b00000101;		
			}
			PORTB &= (~0x05);
		}
			
		else
		{
			printf("NO SIGNAL                  \r");
		}
		waitms(200);
	}
}